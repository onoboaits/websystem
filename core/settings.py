"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os, random, string
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()  # take environment variables from .env.

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!s
SECRET_KEY = os.environ.get('SECRET_KEY')


# TODO add this to env after demo
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

env_debug_val = os.environ.get('DEBUG')
DEBUG = (env_debug_val.lower() == 'true') or (env_debug_val is True)

# HOSTs List
ALLOWED_HOSTS = ['*']
# CSRF_TRUSTED_ORIGINS = ['https://*.advisorcx.ngrok.app']

THIRDPARTY_APPS = [
    'django_hosts',
    "sslserver",
]

SHARED_APPS = (
    'django_tenants',  # mandatory
    'home',  # you must list the app where your tenant model resides in
    'webauth',
    'adminapp',
    'demo',
    'corsheaders',
    'link_api',  # added 3.4.24, link api
    'rest_framework',
    'compliance',  # added 1.19.24, compliance system
    'virtual_calendar',
    'django.contrib.contenttypes',
    # everything below here is optional
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.staticfiles",

)

TENANT_APPS = (
    'wagtailcms',
    # 'wagtailcms.homepage',
    # 'wagtailcms.teampage',
    # 'wagtailcms.templatetags',
    # your tenant-specific apps
   
    # start wagtail
    'wagtail.contrib.forms',
    'wagtail.contrib.redirects',
    'wagtail.contrib.settings',
    'wagtail.embeds',
    'wagtail.sites',
    'wagtail.users',
    'wagtail.snippets',
    'wagtail.documents',
    'wagtail.images',
    'wagtail.search',
    'wagtail.admin',
    'wagtail',
    'taggit',
    'modelcluster',

    "wagtailmenus",  # new
    'wagtail_modeladmin',

    # added for forms 1/10/2024
    'wagtailstreamforms',
    'generic_chooser',

    # end wagtail
    'webpack_boilerplate',  # new
    'wagtail_adminsortable',
    "colorfield",
    "wagtailiconchooser",
    "wagtailseo",

)

INSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS] + THIRDPARTY_APPS


MIDDLEWARE = [
    'django_tenants_url.middleware.RequestUUIDTenantMiddleware',
    'django_tenants.middleware.main.TenantMainMiddleware',
    'django_hosts.middleware.HostsRequestMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'django_hosts.middleware.HostsResponseMiddleware',
    'home.middlewares.public_events_page_middleware.PublicEventsPageMiddleware',
    'home.middlewares.wagtail_redirect_override_middleware.WagtailRedirectOverrideMiddleware',
]


MIDDLEWARE_GROUPS = {
    'default': MIDDLEWARE,
    'approved': [
        'home.middlewares.approve_middleware.ApproveMiddleware'
    ],
}


CORS_ALLOWED_ORIGINS = [
    "http://home.fod:8000",  # Add the domains you want to allow
]

# Optional: Configure other CORS settings if needed
# For example, to allow cookies to be included in cross-origin requests, use:
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = "core.urls"
ROOT_HOSTCONF = 'core.hosts'  # Replace 'your_project.hosts' with your host configuration module
DEFAULT_HOST = 'app'

# HOME_TEMPLATES = os.path.join(BASE_DIR, 'templates')

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        'DIRS': [],                             # new
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "wagtail.contrib.settings.context_processors.settings",
                "home.custom_context.global_data",
                #"compliance.custom_context.global_data",
                'wagtailmenus.context_processors.wagtailmenus',  # new
                #'wagtailcms.context_processors.admin_logo',
                # 'wagtailcms.context_processors.theme',
            ],  
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DB_ENGINE = os.getenv('DB_ENGINE', None)
DB_USERNAME = os.getenv('DB_USERNAME', None)
DB_PASS = os.getenv('DB_PASS', None)
DB_HOST = os.getenv('DB_HOST', None)
DB_PORT = os.getenv('DB_PORT', None)
DB_NAME = os.getenv('DB_NAME', None)

if DB_ENGINE and DB_NAME and DB_USERNAME:
    DATABASES = {
        'default': {
            # 'ENGINE': 'django.db.backends.' + DB_ENGINE,
            'ENGINE': 'django_tenants.postgresql_backend',
            'NAME': DB_NAME,
            'USER': DB_USERNAME,
            'PASSWORD': DB_PASS,
            'HOST': DB_HOST,
            'PORT': DB_PORT,
        },
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': 'db.sqlite3',
        }
    }

DATABASE_ROUTERS = (
    'django_tenants.routers.TenantSyncRouter',
)

WAGTAILSTREAMFORMS_FORM_TEMPLATES = (
    ("stream_forms/default_form.html", "Default Form Template"),
    ("stream_forms/modal_form.html", "Modal Form Template"),
    ("stream_forms/two_columns_form.html", "Two Columns Form"),
)

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_DIR = os.path.join(BASE_DIR, 'static')
X_FRAME_OPTIONS = 'SAMEORIGIN'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

# if not DEBUG:
#    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
AUTH_USER_MODEL = "home.CustomUser"
TENANT_MODEL = "home.Client"  # app.Model
TENANT_DOMAIN_MODEL = "home.Domain"  # app.Model
LOGIN_REDIRECT_URL = '/'
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND')

DTU_TENANT_NAME = "Public"
DTU_TENANT_SCHEMA = "public"
DTU_DOMAIN_NAME = "localhost"
DTU_PAID_UNTIL = "2100-12-31"
DTU_ON_TRIAL = False
DTU_HEADER_NAME = "HTTP_X_REQUEST_ID"
DTU_AUTO_CREATE_SCHEMA = True
DTU_AUTO_DROP_SCHEMA = False
DTU_TENANT_USER_MODEL = 'home.TenantUser'

# TODO add folder view based on tenant for example /media/<customer-url>/**
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# TODO CHANGE THESE IN PRODUCTION!
SENDGRID_SENDER_IDENTITY = os.getenv('SENDGRID_SENDER_IDENTITY')
SENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')

# TODO CHANGE THIS IN PRODUCTION!
CHROME_EXECUTABLE = 'C:\\Users\\modern\\AppData\\Local\\Chromium\\Application\\chrome.exe'

# Facebook App
FACEBOOK_APP_ID = os.environ.get('FACEBOOK_APP_ID')
FACEBOOK_APP_SECRET = os.environ.get('FACEBOOK_APP_SECRET')

SESSION_COOKIE_AGE = 3600  # 1 hour in seconds

# WAGTAIL SETTINGS

# This is the human-readable name of your Wagtail install
# which welcomes users upon login to the Wagtail admin.
WAGTAIL_SITE_NAME = 'WebSystem'

# Replace the search backend
# WAGTAILSEARCH_BACKENDS = {
#  'default': {
#    'BACKEND': 'wagtail.search.backends.elasticsearch8',
#    'INDEX': 'myapp'
#  }
# }


WAGTAIL_MODERATION_ENABLED = True
# Wagtail email notifications from address
WAGTAILADMIN_NOTIFICATION_FROM_EMAIL = 'wagtail@myhost.io'
# Wagtail email notification format
WAGTAILADMIN_NOTIFICATION_USE_HTML = True
# Reverse the default case-sensitive handling of tags
TAGGIT_CASE_INSENSITIVE = True
WAGTAILADMIN_BASE_URL = os.environ.get("WAGTAILADMIN_BASE_URL", "http://localhost:8000")


ORDERING_FIELD = 'my_order'


WAGTAILADMIN_RICH_TEXT_EDITORS = {
    'default': {
        'WIDGET': 'wagtail.admin.rich_text.DraftailRichTextArea',
        'OPTIONS': {
            'features': [
                'bold',
                'italic',
                'h2',
                'h3',
                'link',
                'ol',
                'ul',
                'document-link',
            ],
        },
    },
}
